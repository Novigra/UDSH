<UserControl x:Class="UDSH.View.MKBUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:local="clr-namespace:UDSH.View"
             xmlns:vm="clr-namespace:UDSH.ViewModel"
             xmlns:Conv="clr-namespace:UDSH.Converters"
             Loaded="UserControl_Loaded"
             mc:Ignorable="d" 
             d:DesignHeight="650" d:DesignWidth="1200">
    <UserControl.Resources>
        <Conv:EnumDescriptionConverter x:Key="EnumDescriptionConverter"/>
        <Conv:HeightConverter x:Key="WidthConverter"/>
    </UserControl.Resources>
    <Grid x:Name="ParentGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="40"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Rectangle Grid.Row="0" Panel.ZIndex="2" Fill="{StaticResource MainTopHeaderCSFSCB}"/>

        <!-- MKB - Tools -->
        <StackPanel Orientation="Horizontal" Margin="5,0,0,0" Panel.ZIndex="2">
            <!-- Part One -->
            <Grid>
                <Button Margin="5" Command="{Binding SaveButton}"/>
                <Image Margin="7" Source="/Resource/White/SaveFile-White.png"/>
            </Grid>
            <Grid Margin="-2,0,0,0">
                <Button Margin="5" Command="{Binding DeleteButton}"/>
                <Image Margin="7" Source="/Resource/White/DeleteFile-White.png"/>
            </Grid>
            <Rectangle Fill="#FFFFFF" Margin="2,3,0,3" RadiusX="3" RadiusY="3" Width="3"/>

            <!-- Part Two - Text Type -->
            <TextBlock Style="{StaticResource DefaultText}" Text="Active Element" VerticalAlignment="Center" Margin="10,0,0,0" FontSize="18" Foreground="#FFFFFF"/>
            <ComboBox ItemsSource="{Binding ScriptElements}" SelectedItem="{Binding SelectedScriptElement}" Margin="5,7,0,7">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Style="{StaticResource DefaultText}" Text="{Binding Converter={StaticResource EnumDescriptionConverter}}"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>

                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction Command="{Binding ActiveElementSelectionChanged}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </ComboBox>

            <Rectangle Fill="#FFFFFF" Margin="15,3,0,3" RadiusX="3" RadiusY="3" Width="3"/>

            <!-- Part Three -->
            <Grid Margin="-3,0,0,0">
                <Button Margin="7" Command="{Binding BoldText}"/>
                <Image Margin="7,7,7,5" Source="/Resource/White/Bold.png"/>
            </Grid>
            <Grid Margin="-16,0,0,0">
                <Button Margin="7" Command="{Binding ItalicText}"/>
                <Image Margin="7,7,7,4" Source="/Resource/White/Italic.png"/>
            </Grid>
            <Grid Margin="-10,0,0,0">
                <Button Margin="7" Command="{Binding StrikethroughText}"/>
                <Image Margin="7,7,7,4" Source="/Resource/White/Strikethrough.png"/>
            </Grid>
            <Grid Margin="-10,0,0,0">
                <Button Margin="7" Command="{Binding UnderlineText}"/>
                <Image Margin="7" Source="/Resource/White/Underline.png"/>
            </Grid>
            <Rectangle Fill="#FFFFFF" Margin="2,3,0,3" RadiusX="3" RadiusY="3" Width="3"/>

            <!-- Part Four -->
            <Grid>
                <Button Margin="5"/>
                <Image Margin="8" Source="/Resource/White/Photo-White.png"/>
            </Grid>
            <Grid>
                <Button x:Name="NoteButton" Margin="5">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                            <i:InvokeCommandAction Command="{Binding AddNote}" PassEventArgsToCommand="True"/>
                        </i:EventTrigger>

                        <i:EventTrigger EventName="Loaded">
                            <i:InvokeCommandAction Command="{Binding NoteButtonLoaded}" CommandParameter="{Binding ElementName=NoteButton}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>
                <Image Margin="8" Source="/Resource/White/AddNote-White.png"/>
            </Grid>

            <Grid>
                <Button Margin="5"/>
                <Image Margin="8" Source="/Resource/White/AddBN-White.png"/>
            </Grid>

            <Grid>
                <Button Margin="5"/>
                <Image Margin="8" Source="/Resource/White/LinkBN-White.png"/>
            </Grid>
        </StackPanel>


        <!-- MKB - Inside Workplace -->
        <Border Grid.Row="1" BorderThickness="0" BorderBrush="Red" Panel.ZIndex="1">
            <Border.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFE6E6E6"/>
                    <GradientStop Color="#FFB5BAC2" Offset="1"/>
                </LinearGradientBrush>
            </Border.Background>
            <Canvas x:Name="MainCanvas" Background="Transparent" HorizontalAlignment="Left" ContextMenuOpening="MainCanvas_ContextMenuOpening" VerticalAlignment="Top" Width="1200" Height="610" RenderTransformOrigin="0.5,0.5">
                <local:EllipseCanvas x:Name="ECanvas" IsHitTestVisible="False" Width="1200" Height="610">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Loaded">
                            <i:InvokeCommandAction Command="{Binding EllipseCanvasLoaded}" CommandParameter="{Binding ElementName=ECanvas}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </local:EllipseCanvas>
                <!--
                <Border x:Name="BorderGreen" MouseLeftButtonDown="BorderGreen_MouseLeftButtonDown" Background="Green" Width="100" Height="100" Panel.ZIndex="1" Canvas.Left="30"/>
                <Border x:Name="BorderBlue" Background="Blue" Width="100" Height="100" Panel.ZIndex="1" Canvas.Left="130"/>
                <Border x:Name="BorderRed" BorderBrush="Red" BorderThickness="5" IsHitTestVisible="False" Width="1600" Height="700" Panel.ZIndex="1" Canvas.Left="0"/>
                -->

                <!-- For Test Purposes -->
                <Border x:Name="BorderCollision" Width="500" Height="300" Background="Transparent" Padding="40" Canvas.Left="300" Opacity="0" IsHitTestVisible="false">
                    <StackPanel Orientation="Vertical">
                        <Border Background="#66E0911A" VerticalAlignment="Center" BorderThickness="2.0" HorizontalAlignment="Center" Width="30" Height="30" CornerRadius="30" Margin="0,0,0,10">
                            <Border.BorderBrush>
                                <VisualBrush>
                                    <VisualBrush.Visual>
                                        <Rectangle StrokeDashArray="2 2" Fill="Transparent" Stroke="#E0911A" StrokeThickness="2" RadiusX="30" RadiusY="30"
                                                   Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}}, Path=ActualWidth}"
                                                   Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}}, Path=ActualHeight}"/>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Border.BorderBrush>
                        </Border>
                        <Border Background="#E0911A" CornerRadius="5">
                            <StackPanel Orientation="Vertical" Margin="10,10,10,10">
                                <StackPanel Orientation="Horizontal" IsHitTestVisible="False">
                                    <Image Source="/Resource/Speaker.png" Width="30" Height="30"/>
                                    <TextBlock Style="{StaticResource DefaultText}" Text="Dialogue" FontSize="18" VerticalAlignment="Center" Margin="10,0,0,0"/>
                                    <Rectangle Width="2" Fill="Black" RadiusX="1" RadiusY="1" Margin="5,0,0,0"/>
                                    <TextBlock Style="{StaticResource DefaultText}" Text="Dialogue" FontSize="18" VerticalAlignment="Center" Margin="5,0,0,0"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                                    <Image Source="/Resource/ProfilePicture.png" Width="20" Height="20"/>
                                    <RichTextBox Style="{StaticResource MKBText}" VerticalAlignment="Center" Width="368">
                                        <FlowDocument>
                                            <Paragraph>
                                                <Run FontWeight="SemiBold" Text="Mohammed Kenawy"/>
                                            </Paragraph>
                                        </FlowDocument>
                                    </RichTextBox>
                                </StackPanel>

                                <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                                    <Image Source="/Resource/Log.png" Width="20" VerticalAlignment="Top" Height="20"/>
                                    <RichTextBox Style="{StaticResource MKBText}" VerticalAlignment="Top" Width="368">
                                        <FlowDocument>
                                            <Paragraph>
                                                <Run FontWeight="SemiBold" Text="Finally, I can eat it. I’ve been waiting for this moment for a long time."/>
                                            </Paragraph>
                                        </FlowDocument>
                                    </RichTextBox>
                                </StackPanel>
                            </StackPanel>

                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseLeftButtonDown">
                                    <i:InvokeCommandAction Command="{Binding BorderLMBDown}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="MouseLeftButtonUp">
                                    <i:InvokeCommandAction Command="{Binding BorderLMBUp}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="MouseMove">
                                    <i:InvokeCommandAction Command="{Binding BorderMouseMove}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Border>
                        <Border Background="#7F00FFFF" VerticalAlignment="Center" BorderThickness="2.0" HorizontalAlignment="Center" Width="30" Height="30" CornerRadius="30" Margin="0,10,0,0">
                            <Border.BorderBrush>
                                <VisualBrush>
                                    <VisualBrush.Visual>
                                        <Rectangle StrokeDashArray="2 2" Fill="Cyan" Stroke="Cyan" StrokeThickness="2" RadiusX="30" RadiusY="30"
                                                   Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}}, Path=ActualWidth}"
                                                   Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}}, Path=ActualHeight}"/>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Border.BorderBrush>
                        </Border>
                    </StackPanel>
                </Border>

                <Border x:Name="LeftCollision" Background="Red" BorderThickness="0" IsHitTestVisible="False" Width="300" Height="{Binding RelativeSource={RelativeSource AncestorType=Canvas}, Path=ActualHeight}" Panel.ZIndex="1" Canvas.Left="0">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Loaded">
                            <i:InvokeCommandAction Command="{Binding LeftCollisionLoaded}" CommandParameter="{Binding ElementName=LeftCollision}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Border>

                <Border x:Name="RightCollision" Background="Purple" BorderThickness="0" IsHitTestVisible="False" Width="1000" Height="{Binding RelativeSource={RelativeSource AncestorType=Canvas}, Path=ActualHeight}" Panel.ZIndex="1" Canvas.Left="{Binding RelativeSource={RelativeSource AncestorType=Canvas}, Path=ActualWidth, Converter={StaticResource WidthConverter}, ConverterParameter=1000}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Loaded">
                            <i:InvokeCommandAction Command="{Binding RightCollisionLoaded}" CommandParameter="{Binding ElementName=RightCollision}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Border>

                <Border x:Name="BottomCollision" Background="Orange" BorderThickness="0" IsHitTestVisible="False" Width="{Binding RelativeSource={RelativeSource AncestorType=Canvas}, Path=ActualWidth}" Height="1000" Panel.ZIndex="1" Canvas.Top="{Binding RelativeSource={RelativeSource AncestorType=Canvas}, Path=ActualHeight, Converter={StaticResource WidthConverter}, ConverterParameter=1000}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Loaded">
                            <i:InvokeCommandAction Command="{Binding BottomCollisionLoaded}" CommandParameter="{Binding ElementName=BottomCollision}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Border>

                <Canvas.RenderTransform>
                    <TranslateTransform X="0" Y="0"/>
                </Canvas.RenderTransform>
                
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseRightButtonDown">
                        <i:InvokeCommandAction Command="{Binding CanvasRMBDown}"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseRightButtonUp">
                        <i:InvokeCommandAction Command="{Binding CanvasRMBUp}"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseMove">
                        <i:InvokeCommandAction Command="{Binding CanvasMouseMove}"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="Loaded">
                        <i:InvokeCommandAction Command="{Binding CanvasLoaded}" CommandParameter="{Binding ElementName=MainCanvas}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>

                <Canvas.ContextMenu>
                    <ContextMenu Style="{StaticResource ContentItemProperties}">
                        <MenuItem Header="Add Dialogue" Command="{Binding AddDialogueNode}" CommandParameter="Dialogue"/>
                        <MenuItem Header="Add Choice" Command="{Binding AddDialogueNode}" CommandParameter="Choice"/>
                    </ContextMenu>
                </Canvas.ContextMenu>
            </Canvas>
        </Border>

        <Grid x:Name="SideContentGrid" Grid.Row="1" HorizontalAlignment="Left" Panel.ZIndex="1">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Loaded">
                    <i:InvokeCommandAction Command="{Binding SideContentGridLoaded}" CommandParameter="{Binding ElementName=SideContentGrid}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </Grid>

        <i:Interaction.Triggers>
            <i:EventTrigger EventName="Loaded">
                <i:InvokeCommandAction Command="{Binding ParentGridLoaded}" CommandParameter="{Binding ElementName=ParentGrid}"/>
            </i:EventTrigger>

            <i:EventTrigger EventName="MouseMove">
                <i:InvokeCommandAction Command="{Binding NoteButtonMouseMove}" PassEventArgsToCommand="True"/>
            </i:EventTrigger>

            <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                <i:InvokeCommandAction Command="{Binding StopAddingNoteProcess}" PassEventArgsToCommand="True"/>
            </i:EventTrigger>
        </i:Interaction.Triggers>
    </Grid>
</UserControl>
